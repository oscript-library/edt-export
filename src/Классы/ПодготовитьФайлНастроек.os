#Использовать logos

Перем _Лог;
Перем _файлыОшибок;
Перем _ФайлНастроек;

Процедура ОписаниеКоманды(Команда) Экспорт
	
	Команда.Аргумент("GENERIC_ISSUE_SETTINGS_JSON", "" ,"Путь к файлу настроек. Например ./generic-issue-settings.json")
	.ТСтрока()
	.ВОкружении("GENERIC_ISSUE_SETTINGS_JSON");
	
	Команда.Аргумент("GENERIC_ISSUE_JSON", "" ,"Путь к файлам generic-issue.json, на основе которых будет создан файл настроек. Например ./edt-json.json,./acc-generic-issue.json")
	.ТСтрока()
	.ВОкружении("GENERIC_ISSUE_JSON");
	
КонецПроцедуры

Процедура ВыполнитьКоманду(Знач Команда) Экспорт
	
	ИнициализацияПараметров(Команда);
	
	таблицаНастроек = ОбщегоНазначения.ПолучитьТаблицуНастроек( _ФайлНастроек, _Лог );
	_лог.Отладка( "Из файла настроек прочитано: " + таблицаНастроек.Количество() );
	
	соотНастройки = Новый Соответствие;
	
	Для каждого цФайл Из _файлыОшибок Цикл
		
		ошибкиФайла = ОбщегоНазначения.ПрочитатьJSONФайл( цФайл, _Лог );
		
		Если Не ТипЗнч( ошибкиФайла ) = Тип("Структура") Тогда
			
			_Лог.Ошибка( "Не поддерживаемая структура файла: " + цФайл );			
			Продолжить;
			
		КонецЕсли;
		
		Если Не ошибкиФайла.Свойство("issues") Тогда
			
			_Лог.Ошибка( "Не поддерживаемая структура файла: " + цФайл );			
			Продолжить;
			
		КонецЕсли;
		
		Если Не ТипЗнч( ошибкиФайла.issues ) = Тип("Массив") Тогда
			
			_Лог.Ошибка( "Не поддерживаемая структура файла: " + цФайл );			
			Продолжить;
			
		КонецЕсли;
		
		Для каждого цОшибка Из ошибкиФайла.issues Цикл
			
			прочитанныеНастройки = ПереопределяемыеПараметры();
			ЗаполнитьЗначенияСвойств( прочитанныеНастройки, цОшибка );
			
			соотНастройки.Вставить(цОшибка.ruleId, прочитанныеНастройки);
			
		КонецЦикла;
		
	КонецЦикла;
	
	_лог.Отладка( "Из файлов прочитано различных ошибок: " + соотНастройки.Количество());
	
	структПоиска = Новый Структура("ruleId,message,filePath","","","");
	
	Для каждого цЭлемент Из соотНастройки Цикл
		
		структПоиска.ruleId = цЭлемент.Ключ;
		
		Если таблицаНастроек.НайтиСтроки(структПоиска).Количество() = 0 Тогда
			
			новСтрока = таблицаНастроек.Добавить();
			
			ЗаполнитьЗначенияСвойств( новСтрока, цЭлемент.Значение );
			новСтрока.ruleId = цЭлемент.Ключ;
			новСтрока.message = "";
			новСтрока.filePath = "";
			
		КонецЕсли;
		
	КонецЦикла;
	
	структПоиска.ruleId = "";
	
	Если таблицаНастроек.НайтиСтроки(структПоиска).Количество() = 0 Тогда
		
		новСтрока = таблицаНастроек.Добавить();
		
		новСтрока.ruleId = "";
		новСтрока.message = "";
		новСтрока.filePath = "";
		
	КонецЕсли;

	таблицаНастроек.Сортировать("ruleId,message,filePath");
	
	_лог.Отладка( "Различных настроек: " + таблицаНастроек.Количество());
	
	настройкиКЗаписи = Новый Массив;
	
	Для каждого цСтрокаНастройки Из таблицаНастроек Цикл
		
		структНастройка = ЭлементНастройки();
		ЗаполнитьЗначенияСвойств( структНастройка, цСтрокаНастройки );
		настройкиКЗаписи.Добавить( структНастройка );
		
	КонецЦикла;
	
	_лог.Отладка( "К записи в файл: " + настройкиКЗаписи.Количество());
	
	ОбщегоНазначения.ЗаписатьJSONВФайл( настройкиКЗаписи, _ФайлНастроек, _Лог );
	
КонецПроцедуры

Процедура ИнициализацияПараметров(Знач Команда)
	
	путьКФайлуНастроек = Команда.ЗначениеАргумента("GENERIC_ISSUE_SETTINGS_JSON");
	файлыОшибок = Команда.ЗначениеАргумента("GENERIC_ISSUE_JSON");
	
	_ФайлНастроек = ОбщегоНазначения.АбсолютныйПуть( путьКФайлуНастроек );
	_лог.Отладка( "Файл настроек = " + _ФайлНастроек );
	
	_файлыОшибок = Новый Массив;
	
	Для каждого цПутьКФайлу Из СтрРазделить( файлыОшибок, ",") Цикл
		
		Если ОбщегоНазначения.ФайлСуществует(цПутьКФайлу) Тогда
			
			файлСОшибками = ОбщегоНазначения.АбсолютныйПуть( цПутьКФайлу );

			_файлыОшибок.Добавить(файлСОшибками);
			
			_лог.Отладка( "Добавлен файл generic-issue = " + файлСОшибками );
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ПереопределяемыеПараметры()
	
	Возврат Новый Структура("severity,type,effortMinutes");
	
КонецФункции

Функция ЭлементНастройки()
	
	структ = Новый Структура;
	
	структ.Вставить("ruleId");
	структ.Вставить("message");
	структ.Вставить("filePath");
	структ.Вставить("severity");
	структ.Вставить("type");
	структ.Вставить("effortMinutes");
	
	Возврат структ;
	
КонецФункции

Функция ИмяЛога() Экспорт
	Возврат "oscript.app.edtExport";
КонецФункции

_Лог = Логирование.ПолучитьЛог(ИмяЛога());