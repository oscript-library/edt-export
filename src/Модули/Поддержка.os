#Использовать logos

Перем _классы;
Перем _лог;

Функция ПрочитатьИнформациюОПоддержке( ПутьКПроекту ) Экспорт
	
	путьКФайлуПоддержки = ОбъединитьПути( ПутьКПроекту, "Ext", "ParentConfigurations.bin" );
	
	файлПоддержки = Новый Файл( путьКФайлуПоддержки );
	
	Если файлПоддержки.Существует()
		И файлПоддержки.ЭтоФайл() Тогда
		
		_лог.Отладка( СтрШаблон( "Файл поддержки <%1> найден", путьКФайлуПоддержки ) );
		
	Иначе
		
		_лог.Ошибка( СтрШаблон( "Файл поддержки <%1> НЕ найден", путьКФайлуПоддержки ) );
		Возврат Новый Массив;
		
	КонецЕсли;
	
	данныеПоддержки = ПолучитьДанныеПоддержки( путьКФайлуПоддержки );
	
	описанияПоддержки = данныеПоддержки["ОписанияОбъектов"];
	описанияФайлов = Новый Массив;

	_классы = Классы();
	
	Для каждого цФайлМодуля Из НайтиФайлы( ПутьКПроекту, "*.bsl", Истина ) Цикл
		
		структФайла = Новый Структура;
		структФайла.Вставить( "file", цФайлМодуля.ПолноеИмя );
		структФайла.Вставить( "uuid", ПолучитьУУИДПоФайлу( цФайлМодуля.ПолноеИмя ) );
		
		уровеньПоддержки = 4;
		
		Для каждого цЭлементПоддержки Из ОбеспечитьЭлемент( описанияПоддержки, структФайла.uuid, Новый Массив ) Цикл
			
			уровеньПоддержки = Мин( уровеньПоддержки, Число(цЭлементПоддержки) );
			
		КонецЦикла;
		
		структФайла.Вставить( "Support", уровеньПоддержки );
		
		описанияФайлов.Добавить( структФайла );
		
	КонецЦикла;
	
	Возврат описанияФайлов;

КонецФункции

Функция ПолучитьДанныеПоддержки( Знач пПутьКФайлуПоддержки )

	чтениеТекста = Новый ЧтениеТекста( пПутьКФайлуПоддержки, "UTF-8" );
	текстПоддержки = чтениеТекста.Прочитать();
	чтениеТекста.Закрыть();
	
	данные = СтрРазделить( текстПоддержки, ",", Истина );
	
	всегоКонфигураций = Число( данные[Индекс_КоличествоКонфигурацийПоддержки()] );
	
	_лог.Отладка( "Количество конфигураций поставщика: " + всегоКонфигураций );
	
	сдвиг = 3;
	
	данныеПоддержки = Новый Соответствие;
	
	соотОбъекты = Новый Соответствие;
	
	Для цНомерКонфигурации = 1 По всегоКонфигураций Цикл
		
		поставка = Новый Структура;
		
		поставка.Вставить("Версия"      , данные[сдвиг+3]);
		поставка.Вставить("Поставщик"   , данные[сдвиг+4]);
		поставка.Вставить("Конфигурация", данные[сдвиг+5]);
		
		_лог.Отладка( "Чтение конфигурации: " + поставка.Конфигурация + ", версии: " + поставка.Версия );
		
		всегоОбъектов = Число(данные[сдвиг+6]);
		
		_лог.Отладка( "Объектов: " + всегоОбъектов );
		
		массивОбъектов = Новый Массив;
		
		Для цНомерОбъекта = 0 По всегоОбъектов - 1 Цикл
			
			сдвигОбъекта = сдвиг + 7 + цНомерОбъекта*4;
			
			описаниеОбъекта = Новый Структура;
			
			описаниеОбъекта.Вставить( "Поддержка", данные[сдвигОбъекта] ); // 0 - не редактируется, 1 - с сохранением поддержки, 2 - снято
			описаниеОбъекта.Вставить( "Поставка", данные[сдвигОбъекта + 1]); // 0 - изменения разрешены, 1 - изменения не рекомендуются, 2 - изменения запрещены, -1 - включение в конфигурацию не рекомендуется
			описаниеОбъекта.Вставить( "УУИД", данные[сдвигОбъекта + 2]);
			описаниеОбъекта.Вставить( "УУИДПоставщика", данные[сдвигОбъекта + 3]);
			
			массивОбъектов.Добавить( описаниеОбъекта );
			
			ОбеспечитьЭлемент( соотОбъекты, описаниеОбъекта.УУИД, Новый Массив ).Добавить(описаниеОбъекта.Поддержка);
			
		КонецЦикла;
		
		поставка.Вставить( "Объекты", массивОбъектов );
		
		данныеПоддержки.Вставить( поставка.Конфигурация, поставка );
		
		сдвиг = сдвиг + 9 + всегоОбъектов*4;
		
	КонецЦикла;
	
	данныеПоддержки.Вставить( "ОписанияОбъектов", соотОбъекты );
	
	Возврат данныеПоддержки;

КонецФункции

Функция Индекс_КоличествоКонфигурацийПоддержки()

	Возврат 2;

КонецФункции

Функция ОбеспечитьЭлемент( пСоответствие, пКлюч, пЗначениеПоУмолчанию )

	значение = пСоответствие[пКлюч];
	
	Если Не значение = Неопределено Тогда
		
		Возврат значение;
		
	Иначе
		
		пСоответствие.Вставить( пКлюч, пЗначениеПоУмолчанию );
		
		Возврат пЗначениеПоУмолчанию;
		
	КонецЕсли;

КонецФункции

Функция ПолучитьУУИДПоФайлу( Знач пПутьКФайлу )
	
	файлМодуля = Новый Файл( пПутьКФайлу );
	каталог = файлМодуля.Путь;
	имяФайла = ВРег( файлМодуля.Имя );
	
	Если имяФайла = Врег( "ExternalConnectionModule.bsl" )
		ИЛИ имяФайла = Врег( "ManagedApplicationModule.bsl" )
		ИЛИ имяФайла = Врег( "OrdinaryApplicationModule.bsl" )
		ИЛИ имяФайла = Врег( "SessionModule.bsl" ) Тогда
		
		путьКОписанию = Лев( каталог, СтрДлина( каталог ) - 4 ) + "Configuration.xml";
	
	ИначеЕсли СтрЗаканчиваетсяНа( каталог, "\Ext\Form\" ) Тогда
		
		путьКОписанию = Лев( каталог, СтрДлина( каталог ) - 10 ) + ".xml";
		
	ИначеЕсли СтрЗаканчиваетсяНа( каталог, "\Ext\" ) Тогда
		
		путьКОписанию = Лев( каталог, СтрДлина( каталог ) - 5 ) + ".xml";
		
	Иначе
		
		_лог.Предупреждение( СтрШаблон( "Не удалось получить xml файл для <%1>.", пПутьКФайлу ));
		
	КонецЕсли;
	
	файлОписания = Новый Файл( путьКОписанию );
	
	Если Не файлОписания.Существует()
		ИЛИ Не файлОписания.ЭтоФайл() Тогда
		
		_лог.Предупреждение( СтрШаблон( "Не удалось найти xml файл для <%1>. Искали в <%2>", пПутьКФайлу, путьКОписанию ));
		
		Возврат Неопределено;
		
	КонецЕсли;
	
	чтениеXML = Новый ЧтениеXML;
	
	чтениеXML.ОткрытьФайл( путьКОписанию );
	
	ууид = Неопределено;
	
	Пока ЧтениеXML.Прочитать() Цикл
		
		Если ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента
			И Не _классы.Найти( ВРег( ЧтениеXML.Имя ) ) = Неопределено Тогда
			
			ууид = ЧтениеXML.ПолучитьАтрибут("uuid");
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ЧтениеXML.Закрыть();
	
	Если ууид = Неопределено Тогда
		
		_лог.Предупреждение( "Не удалось получить uuid из " + путьКОписанию );
		
	КонецЕсли;
	
	Возврат ууид;
	
КонецФункции

Функция Классы()

	классы = Новый Массив;
	
	классы.Добавить( "AccountingRegister" );
	классы.Добавить( "AccumulationRegister" );
	классы.Добавить( "BusinessProcess" );
	классы.Добавить( "CalculationRegister" );
	классы.Добавить( "Catalog" );
	классы.Добавить( "ChartOfAccounts" );
	классы.Добавить( "ChartOfCalculationTypes" );
	классы.Добавить( "ChartOfCharacteristicTypes" );
	классы.Добавить( "CommandGroup" );
	классы.Добавить( "CommonAttribute" );
	классы.Добавить( "CommonCommand" );
	классы.Добавить( "CommonForm" );
	классы.Добавить( "CommonModule" );
	классы.Добавить( "CommonPicture" );
	классы.Добавить( "CommonTemplate" );
	классы.Добавить( "Configuration" );
	классы.Добавить( "Constant" );
	классы.Добавить( "DataProcessor" );
	классы.Добавить( "DefinedType" );
	классы.Добавить( "Document" );
	классы.Добавить( "DocumentJournal" );
	классы.Добавить( "DocumentNumerator" );
	классы.Добавить( "Enum" );
	классы.Добавить( "EventSubscription" );
	классы.Добавить( "ExchangePlan" );
	классы.Добавить( "ExternalDataSource" );
	классы.Добавить( "FilterCriterion" );
	классы.Добавить( "Form" );
	классы.Добавить( "FunctionalOption" );
	классы.Добавить( "FunctionalOptionsParameter" );
	классы.Добавить( "HTTPService" );
	классы.Добавить( "InformationRegister" );
	классы.Добавить( "Language" );
	классы.Добавить( "Report" );
	классы.Добавить( "Role" );
	классы.Добавить( "ScheduledJob" );
	классы.Добавить( "Sequence" );
	классы.Добавить( "SessionParameter" );
	классы.Добавить( "SettingsStorage" );
	классы.Добавить( "Style" );
	классы.Добавить( "StyleItem" );
	классы.Добавить( "Task" );
	классы.Добавить( "WebService" );
	классы.Добавить( "WSReference" );
	классы.Добавить( "XDTOPackage" );
	
	классыВРег = Новый Массив;
	
	Для каждого цЭлемент Из классы Цикл
		
		классыВРег.Добавить( ВРег( цЭлемент ) );
		
	КонецЦикла;
	
	Возврат классыВРег;

КонецФункции


Функция ИмяЛога() Экспорт
	Возврат "oscript.app.parseSupport";
КонецФункции

_Лог = Логирование.ПолучитьЛог(ИмяЛога());